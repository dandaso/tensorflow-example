sigmoid ok
  - なぜsigmoid関数を用いるか
    - ∞ 〜 -∞で 1〜0である
    - 必ず値が更新される
    - 微分の際に、式が簡単になる

relu    ok
softmax ok

- なぜ損失関数を使うのか

二乗和誤差 ok
  - なぜ二乗するか

cross entropy ok
  - 

mini_batch ok
微分/偏微分 ok
勾配法 ok

確率的最急降下法
  勾配法 + minibatch

誤差逆伝搬法
  - なぜ Affineレイヤーを取り入れたのか?
      - レイヤーとして定義した方が forwad と backwardを実装し、OrderedDicに入れるだけで
　　　　簡単に多層のネットワークが簡単に表現できるから

  - なぜ誤差逆伝搬法を用いるのか？
　　- 高速だから
      http://postd.cc/2015-08-backprop/
　　　- なぜ高速なのか？
        フォワードモード微分では「1つの入力に対する出力の微分係数」が得られるだけですが、
        リバースモード微分ではそれらの全てが得られるのです。例えば100万の入力と1つの出力を持つ関数があると
        フォワードモード微分だと、微分係数を得るのにグラフを100万回行き来しなければなりませんが、
        リバースモード微分だと1回の降下で全てが得られます。100万倍のスピードアップすることが可能なのです

  - 誤差逆伝搬法とはどういう方法なのか？
    - なぜ、すべての微分係数を得ることができるのか？

    

